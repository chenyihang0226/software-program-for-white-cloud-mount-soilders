import { writable } from 'svelte/store';
export const canUndo = writable(false);
export const canRedo = writable(false);
function createRecord() {
  const { subscribe, set, update } = writable();

  let undoStack = [];
  let redoStack = [];



  /**
   * 
   * @param newState : [{row, col, oldValue}, ...]
   */
  function doAction(newState) {
    undoStack.push(newState);
    redoStack = []; 
    updateAbilityStates();
  }

  function undo() {
    if (undoStack.length === 0) return;
    const prev = undoStack.pop();
    redoStack.push(prev);
    updateAbilityStates();
    return prev;
  }

  function redo() {
    if (redoStack.length === 0) return;
    const next = redoStack.pop();
    undoStack.push(next);
    updateAbilityStates();
    return next;
  }

  function reset() {
    undoStack = [];
    redoStack = [];
    updateAbilityStates();
  }

  function updateAbilityStates() {
    canUndo.set(undoStack.length > 0);
    canRedo.set(redoStack.length > 0);
  }

  return {
    subscribe,
    do: doAction, 
    update: (fn) => {
      update(current => {
        const newState = fn(current);
        undoStack.push(current);
        redoStack = [];
        updateAbilityStates();
        return newState;
      });
    },
    undo,
    redo,
    reset,
    canUndo:canUndo,
    canRedo:canRedo,
  };
}

export const record = createRecord();
