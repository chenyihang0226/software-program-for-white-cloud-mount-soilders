import { writable } from 'svelte/store';
import { getPossibleNumber } from '@sudoku/solver';
import { GRID_LENGTH, SUDOKU_SIZE, GRID_COORDS } from '@sudoku/constants';

function createPossibleNumberSwitch() {
    const possibleNumberSwitch = writable(false);

    return {
        subscribe: possibleNumberSwitch.subscribe,

        toggle() {
            possibleNumberSwitch.update($possibleNumberSwitch => !$possibleNumberSwitch);
        },
        on() {
            possibleNumberSwitch.set(true);
        },
        off() {
            possibleNumberSwitch.set(false);
        }
    }
}

export const possibleNumberSwitch = createPossibleNumberSwitch();


function createPossibleNumbers() {
	const possibleNumbers = writable({});

    return {
        subscribe: possibleNumbers.subscribe,
        fresh(grid) {
            possibleNumbers.update(() => {
                const pn = getPossibleNumber(grid);
                const newPossibleNumbers = {};
                for ( let idx = 0; idx < GRID_LENGTH ; idx++) {
                    let [y, x] = GRID_COORDS[idx]; // row is y, col is x.
                    let val = pn[idx];
                    if (val.length) {
                        newPossibleNumbers[x + ',' + y] = val;
                    }
                }
                return newPossibleNumbers;
            });
        },
        clear(pos) {
            possibleNumbers.update($possibleNumbers => {
                delete $possibleNumbers[pos.x + ',' + pos.y];
                return $possibleNumbers;
            });
        }
    }

}

export const possibleNumbers = createPossibleNumbers();